// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: airthmetic.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AirthmeticService_AirthmeticOperation_FullMethodName = "/proto.AirthmeticService/AirthmeticOperation"
)

// AirthmeticServiceClient is the client API for AirthmeticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirthmeticServiceClient interface {
	AirthmeticOperation(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (AirthmeticService_AirthmeticOperationClient, error)
}

type airthmeticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirthmeticServiceClient(cc grpc.ClientConnInterface) AirthmeticServiceClient {
	return &airthmeticServiceClient{cc}
}

func (c *airthmeticServiceClient) AirthmeticOperation(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (AirthmeticService_AirthmeticOperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &AirthmeticService_ServiceDesc.Streams[0], AirthmeticService_AirthmeticOperation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &airthmeticServiceAirthmeticOperationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirthmeticService_AirthmeticOperationClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type airthmeticServiceAirthmeticOperationClient struct {
	grpc.ClientStream
}

func (x *airthmeticServiceAirthmeticOperationClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirthmeticServiceServer is the server API for AirthmeticService service.
// All implementations must embed UnimplementedAirthmeticServiceServer
// for forward compatibility
type AirthmeticServiceServer interface {
	AirthmeticOperation(*ServerRequest, AirthmeticService_AirthmeticOperationServer) error
	mustEmbedUnimplementedAirthmeticServiceServer()
}

// UnimplementedAirthmeticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirthmeticServiceServer struct {
}

func (UnimplementedAirthmeticServiceServer) AirthmeticOperation(*ServerRequest, AirthmeticService_AirthmeticOperationServer) error {
	return status.Errorf(codes.Unimplemented, "method AirthmeticOperation not implemented")
}
func (UnimplementedAirthmeticServiceServer) mustEmbedUnimplementedAirthmeticServiceServer() {}

// UnsafeAirthmeticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirthmeticServiceServer will
// result in compilation errors.
type UnsafeAirthmeticServiceServer interface {
	mustEmbedUnimplementedAirthmeticServiceServer()
}

func RegisterAirthmeticServiceServer(s grpc.ServiceRegistrar, srv AirthmeticServiceServer) {
	s.RegisterService(&AirthmeticService_ServiceDesc, srv)
}

func _AirthmeticService_AirthmeticOperation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirthmeticServiceServer).AirthmeticOperation(m, &airthmeticServiceAirthmeticOperationServer{stream})
}

type AirthmeticService_AirthmeticOperationServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type airthmeticServiceAirthmeticOperationServer struct {
	grpc.ServerStream
}

func (x *airthmeticServiceAirthmeticOperationServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AirthmeticService_ServiceDesc is the grpc.ServiceDesc for AirthmeticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirthmeticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AirthmeticService",
	HandlerType: (*AirthmeticServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AirthmeticOperation",
			Handler:       _AirthmeticService_AirthmeticOperation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "airthmetic.proto",
}
